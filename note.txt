from django.db import models
from common.models.base_models import BaseModel


class Hotel(BaseModel):
    name = models.CharField(max_length=150)
    address = models.CharField(max_length=255)
    village = models.CharField(max_length=100)
    district = models.CharField(max_length=100)
    province = models.CharField(max_length=100)
    phone = models.CharField(max_length=20)
    email = models.EmailField(max_length=255)
    stars = models.PositiveSmallIntegerField()
    check_in_time = models.TimeField()
    check_out_time = models.TimeField()

    def __str__(self):
        return self.name


class Staff(BaseModel):
    hotel = models.ForeignKey(
        Hotel, on_delete=models.CASCADE, related_name="staff_hotel"
    )
    first_name = models.CharField(max_length=100)
    last_name = models.CharField(max_length=100)
    position = models.CharField(max_length=100)
    salary = models.DecimalField(max_digits=9, decimal_places=2, default=0)
    date_of_birth = models.DateField()
    phone = models.CharField(max_length=20)
    email = models.EmailField(max_length=255)
    hire_date = models.DateField()

    def __str__(self):
        return f"{self.first_name} {self.last_name}"


class Guest(BaseModel):
    first_name = models.CharField(max_length=100)
    last_name = models.CharField(max_length=100)
    date_of_birth = models.DateField()
    address = models.CharField(max_length=255)
    phone = models.CharField(max_length=20)
    email = models.EmailField(max_length=255)

    def __str__(self):
        return f"{self.first_name} {self.last_name}"


class RoomType(BaseModel):
    name = models.CharField(max_length=50)
    description = models.CharField(max_length=255, null=True, blank=True)
    price_per_night = models.DecimalField(
        max_digits=9, decimal_places=2, default=0
    )
    capacity = models.PositiveSmallIntegerField()

    def __str__(self):
        return self.name


class Room(BaseModel):
    AVAILABLE = "available"
    OCCUPIED = "occupied"

    STATUS_CHOICES = [
        (AVAILABLE, "Available"),
        (OCCUPIED, "Occupied"),
    ]

    hotel = models.ForeignKey(
        Hotel, on_delete=models.CASCADE, related_name="room_hotel"
    )
    room_type = models.ForeignKey(
        RoomType, on_delete=models.CASCADE, related_name="room_type"
    )
    room_number = models.CharField(max_length=15, unique=True)
    status = models.CharField(
        max_length=10, choices=STATUS_CHOICES, default=AVAILABLE
    )

    def __str__(self):
        return self.room_number


class Booking(BaseModel):
    guest = models.ForeignKey(
        Guest, on_delete=models.CASCADE, related_name="booking_guest"
    )
    room = models.ForeignKey(
        Room, on_delete=models.CASCADE, related_name="booking_room"
    )
    check_in_date = models.DateField()
    check_out_date = models.DateField()
    total_price = models.DecimalField(
        max_digits=9, decimal_places=2, default=0
    )

    def save(self, *args, **kwargs):
        # Calculate the total price based on room type price and duration
        duration = (self.check_out_date - self.check_in_date).days
        self.total_price = duration * self.room.room_type.price_per_night
        super().save(*args, **kwargs)

    def __str__(self):
        return f"{self.guest} booking for {self.room}"


class Payment(BaseModel):
    PAYMENT_METHOD_CASH = "cash"
    PAYMENT_METHOD_CREDIT_CARD = "credit_card"
    PAYMENT_METHOD_DEBIT_CARD = "debit_card"
    PAYMENT_METHOD_BANK_TRANSFER = "bank_transfer"

    PAYMENT_METHOD_CHOICES = [
        (PAYMENT_METHOD_CASH, "Cash"),
        (PAYMENT_METHOD_CREDIT_CARD, "Credit Card"),
        (PAYMENT_METHOD_DEBIT_CARD, "Debit Card"),
        (PAYMENT_METHOD_BANK_TRANSFER, "Bank Transfer"),
    ]

    booking = models.ForeignKey(
        Booking, on_delete=models.CASCADE, related_name="payment_booking"
    )
    amount = models.DecimalField(max_digits=9, decimal_places=2, default=0)
    payment_date = models.DateField()
    payment_method = models.CharField(
        max_length=20,
        choices=PAYMENT_METHOD_CHOICES,
        default=PAYMENT_METHOD_CASH,
    )


in serializers.py 
from rest_framework import serializers
from .models import Hotel, Staff, Guest, RoomType, Room, Booking, Payment


class HotelSerializer(serializers.ModelSerializer):
    class Meta:
        model = Hotel
        fields = "__all__"


class StaffSerializer(serializers.ModelSerializer):
    class Meta:
        model = Staff
        fields = "__all__"


class GuestSerializer(serializers.ModelSerializer):
    class Meta:
        model = Guest
        fields = "__all__"


class RoomTypeSerializer(serializers.ModelSerializer):
    class Meta:
        model = RoomType
        fields = "__all__"


class RoomSerializer(serializers.ModelSerializer):
    class Meta:
        model = Room
        fields = "__all__"


class BookingSerializer(serializers.ModelSerializer):
    class Meta:
        model = Booking
        fields = "__all__"


class PaymentSerializer(serializers.ModelSerializer):
    class Meta:
        model = Payment
        fields = "__all__"
        read_only_fields = ("amount",)


in views.py
from .models import Hotel, Staff, Guest, RoomType, Room, Booking, Payment
from .serializers import (
    HotelSerializer,
    StaffSerializer,
    GuestSerializer,
    RoomTypeSerializer,
    RoomSerializer,
    BookingSerializer,
    PaymentSerializer,
)
from common.viewsets.base_viewsets import BaseModelViewSet
from common.viewsets.msgforcurd import MSGModelViewSet
from common.mixins import SoftDeleteMixin
from rest_framework import status, viewsets
from rest_framework.response import Response


class HotelViewSet(BaseModelViewSet, SoftDeleteMixin, MSGModelViewSet):
    queryset = Hotel.objects.all()
    serializer_class = HotelSerializer


class StaffViewSet(BaseModelViewSet, SoftDeleteMixin, MSGModelViewSet):
    queryset = Staff.objects.all()
    serializer_class = StaffSerializer


class GuestViewSet(BaseModelViewSet, SoftDeleteMixin, MSGModelViewSet):
    queryset = Guest.objects.all()
    serializer_class = GuestSerializer


class RoomTypeViewSet(BaseModelViewSet, SoftDeleteMixin, MSGModelViewSet):
    queryset = RoomType.objects.all()
    serializer_class = RoomTypeSerializer


class RoomViewSet(BaseModelViewSet, SoftDeleteMixin, MSGModelViewSet):
    queryset = Room.objects.all()
    serializer_class = RoomSerializer


class BookingViewSet(BaseModelViewSet, SoftDeleteMixin, MSGModelViewSet):
    queryset = Booking.objects.all()
    serializer_class = BookingSerializer


class PaymentViewSet(BaseModelViewSet, SoftDeleteMixin, MSGModelViewSet):
    queryset = Payment.objects.all()
    serializer_class = PaymentSerializer

    def create(self, request, *args, **kwargs):
        # Get booking instance
        booking_id = request.data.get("booking")
        try:
            booking = Booking.objects.get(id=booking_id)
        except Booking.DoesNotExist:
            return Response(
                {"error": "Booking not found."},
                status=status.HTTP_404_NOT_FOUND,
            )

        # Set the amount from the booking total_price
        request.data["amount"] = booking.total_price

        response = super().create(request, *args, **kwargs)
        data = response.data
        data["message"] = "Payment created successfully."
        return Response(data, status=status.HTTP_201_CREATED)

in urls.py
from django.urls import path
from rest_framework.routers import DefaultRouter
from rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView, TokenVerifyView

from apps.accounts.views import UserTokenObtainPairView
from apps.accounts.views import (
    UserViewSet,
    UserRegisterView,
    UserMeView,
    GroupViewSet,
    PermissionViewSet,
)
from apps.hotel.views import (
    HotelViewSet,
    StaffViewSet,
    GuestViewSet,
    RoomTypeViewSet,
    RoomViewSet,
    BookingViewSet,
    PaymentViewSet,
)
from .views import APIRootView


app_name = 'api'


# Create a custom router by inheriting from DefaultRouter
# class CustomRouter(DefaultRouter):
#     def get_api_root_view(self, api_urls=None):
#         root_view = super().get_api_root_view(api_urls)
#         root_view.cls.__doc__ = "Your custom API root description here."
#         return root_view


# router = CustomRouter()
router = DefaultRouter()
router.register(r'users', UserViewSet)
router.register(r'groups', GroupViewSet)
router.register(r'permissions', PermissionViewSet)
router.register(r'hotels', HotelViewSet)
router.register(r'staff', StaffViewSet)
router.register(r'guests', GuestViewSet)
router.register(r'room-types', RoomTypeViewSet)
router.register(r'rooms', RoomViewSet)
router.register(r'bookings', BookingViewSet)
router.register(r'payments', PaymentViewSet)

urlpatterns = [
    path('', APIRootView.as_view(), name='api-root-view'),
    # path('auth/token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),
    path('auth/signin/', UserTokenObtainPairView.as_view(), name='auth-signin'),
    path('auth/register/', UserRegisterView.as_view(), name='auth-register'),
    path('auth/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),
    # path('auth/token/verify/', TokenVerifyView.as_view(), name='token_verify'),
    path('auth/me/', UserMeView.as_view(), name='auth-me'),
]

urlpatterns += router.urls


in signals.py
from django.db.models.signals import post_save, pre_delete, pre_save
from .models import Booking, Room, Payment
from django.dispatch import Signal
from django.dispatch import receiver
from django.utils import timezone


@receiver(post_save, sender=Booking)
def update_room_status_on_booking_create(sender, instance, created, **kwargs):
    if created:
        instance.room.status = Room.OCCUPIED
        instance.room.save()


@receiver(pre_delete, sender=Booking)
def update_room_status_on_booking_delete(sender, instance, **kwargs):
    instance.room.status = Room.AVAILABLE
    instance.room.save()


@receiver(post_save, sender=Booking)
def update_room_status_on_dates_change(sender, instance, **kwargs):
    if instance.check_out_date < timezone.now().date():
        instance.room.status = Room.AVAILABLE
        instance.room.save()


@receiver(pre_save, sender=Payment)
def sync_payment_with_booking(sender, instance, **kwargs):
    # Ensure the payment amount matches the booking total price
    instance.amount = instance.booking.total_price


@receiver(post_save, sender=Payment)
def update_booking_total_price(sender, instance, created, **kwargs):
    if created:
        booking = instance.booking
        booking.total_price = instance.amount
        booking.save()


@receiver(pre_delete, sender=Payment)
def update_booking_total_price_on_delete(sender, instance, **kwargs):
    booking = instance.booking
    booking.total_price -= instance.amount
    booking.save()


# Define custom signals
post_create_signal = Signal()
post_update_signal = Signal()
post_delete_signal = Signal()

